// Copyright IBM Corp. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

option go_package = "github.com/sykesm/batik/pkg/pb/transaction";

package transaction;

// A Party represents an identity that can be used to represent an owner or an
// interested party.
message Party {
  bytes credential = 1;
}

// StateInfo contains structured information about a state that can be utilized
// by the ledger, state store, and validation. It can be used to enumerate
// owners of a state as well as a "kind" that implies the state contract
// implementation and the schema of the associated state.
message StateInfo {
  repeated Party owners = 1;
  string kind = 2;
}

// A State contains the information stored on the ledger. While the contents of
// the state is generally opaque, the info provides ownership and schema
// information that can be inspected during validation.
message State {
  StateInfo info = 1;
  bytes state = 2;
}

// A ResolvedState contains the information stored on the ledger and represents a
// StateReference that has been resolved to an output state generated by a previous
// committed transaction. While the contents of the state is generally opaque, the
// info provides ownership and schema information that can be inspected during validation.
message ResolvedState {
  bytes txid = 1;
  uint64 output_index = 2;

  StateInfo info = 3;
  bytes state = 4;
}


// A StateReference is a pointer to an output generated by a previous
// transaction.
message StateReference {
  bytes txid = 1;
  uint64 output_index = 2;
}

// A Parameter is additional context that can be included within a transaction
// to "parameterize" consistency valiation. It expresses intent (like an operation)
// and arbitrary information required to properly perform consistency checks.
message Parameter {
  string name = 1;
  bytes value = 2;
}

// A Transaction modifies the ledger by consuming input states and creating
// output states.
message Transaction {
  // Transaction salt is required and must be at least 32 bytes in length.
  bytes salt = 1;

  repeated StateReference inputs = 2;
  repeated StateReference references = 3;
  repeated State outputs = 4;
  repeated Parameter parameters = 5;
  repeated Party required_signers = 6;
}

// A Signer represents a Party that has signed a transaction and contains an
// identity that can be used to represent an owner or an interested party as
// well as a signature over some data.
message Signer {
  bytes credential = 1;
  bytes signature = 2;
}

// A ResolvedTransaction contains a transaction with all of its input and reference
// StateReferences that have been resolved to some ResolvedStates containing the actual
// data for the states. It also contains a list of signatures over the transaction
// that can be used for endorsement validation.
message ResolvedTransaction {
  bytes tx_id = 1;
  Transaction transaction = 2;

  repeated ResolvedState inputs = 3;
  repeated ResolvedState references = 4;
  repeated Signer signers = 5;
}
