// Copyright IBM Corp. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package store.v1;

option go_package = "github.com/sykesm/batik/pkg/pb/store/v1;storev1";

import "google/api/annotations.proto";
import "tx/v1/transaction.proto";

// StoreAPI provides methods for interacting with a backing store to retrieve
// and store transactions and states.
service StoreAPI {
  // GetTransaction retrieves the associated transaction corresponding to the
  // txid passed in the GetTransactionRequest.
  rpc GetTransaction(GetTransactionRequest) returns (GetTransactionResponse) {
    option (google.api.http) = {
      get: "/v1/store/tx/{txid}";
    };
  }
  // PutTransaction hashes the transaction and then stores the encoded
  // transaction in the backing store.
  // Note: This API is temporary and intended for test. DO NOT USE.
  rpc PutTransaction(PutTransactionRequest) returns (PutTransactionResponse);

  // GetState retrieves the associated ResolvedState corresponding to the state
  // reference passed in the GetStateRequest from the backing store indexed by
  // a txid and output index that the State was originally created at in the
  // transaction output list.
  rpc GetState(GetStateRequest) returns (GetStateResponse);
  // PutState stores the encoded resolved state in the backing store.
  // Note: This API is temporary and intended for test. DO NOT USE.
  rpc PutState(PutStateRequest) returns (PutStateResponse);
}

// GetTransactionRequest contains a hashed transaction id.
message GetTransactionRequest {
  bytes txid = 1;
}

// GetTransactionResponse contains the transaction retrieved from the backing
// store indexed by the txid that it hashes to.
message GetTransactionResponse {
  tx.v1.Transaction transaction = 1;
}

// PutTransactionRequest contains a tx.
message PutTransactionRequest {
  tx.v1.Transaction transaction = 1;
}

// PutTransactionResponse is an empty response returned on attempting to store
// a transaction in the backing store.
message PutTransactionResponse {}

// GetStateRequest provides a state reference to resolve in the backing store.
// Consumed indicates whether to fetch a consumed state.
message GetStateRequest {
  tx.v1.StateReference state_ref = 1;
  bool consumed = 2;
}

// GetStateResponse contains a transaction state from the backing store and its
// reference.
message GetStateResponse {
  tx.v1.StateReference state_reference = 1;
  tx.v1.State state = 2;
}

// PutStateRequest contains the data necessary to populate the backing store
// with a state.
message PutStateRequest {
  tx.v1.StateReference state_reference = 1;
  tx.v1.State state = 2;
}

// PutStateResponse is an empty response returned on attempting to store
// a resolved state in the backing store.
message PutStateResponse {}
