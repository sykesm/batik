// Copyright IBM Corp. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

option go_package = "github.com/sykesm/batik/pkg/pb/store/v1;storev1";

package store.v1;

import "google/api/annotations.proto";
import "tx/v1/transaction.proto";
import "tx/v1/resolved.proto";

// StoreAPI provides methods for interacting with a backing store to
// retrieve and store transactions and states.
service StoreAPI {
  // GetTransaction retrieves the associated transaction corresponding to the
  // txid passed in the GetTransactionRequest.
  rpc GetTransaction(GetTransactionRequest) returns (GetTransactionResponse) {
    option (google.api.http) = {
      get: "/v1/store/tx/{txid}";
    };
  }
  // PutTransaction hashes the transaction and then stores the
  // encoded transaction in the backing store.
  // Note: This API is temporary and intended for test. DO NOT USE.
  rpc PutTransaction(PutTransactionRequest) returns (PutTransactionResponse);

  // GetState retrieves the associated ResolvedState corresponding to the state reference
  // passed in the GetStateRequest from the backing store indexed by a txid and
  // output index that the State was originally created at in the transaction output
  // list.
  rpc GetState(GetStateRequest) returns (GetStateResponse);
  // PutState stores the encoded resolved state in the backing store.
  // Note: This API is temporary and intended for test. DO NOT USE.
  rpc PutState(PutStateRequest) returns (PutStateResponse);
}

// GetTransactionRequest contains a hashed transaction id.
message GetTransactionRequest {
  bytes txid = 1;
}

// GetTransactionResponse contains the transaction retrieved from the backing store
// indexed by the txid that it hashes to.
message GetTransactionResponse {
  tx.v1.Transaction transaction = 1;
}

// PutTransactionRequest contains a tx.
message PutTransactionRequest {
  tx.v1.Transaction transaction = 1;
}

// PutTransactionResponse is an empty response returned on attempting to store
// a transaction in the backing store.
message PutTransactionResponse {}

// GetStateRequest contains a state reference denoted by a txid and output index that can
// be resolved to a State existing in the backing store.
message GetStateRequest {
  tx.v1.StateReference state_ref = 1;
}

// GetStateResponse contains a resolved state retrieved from the backing store indexed
// by the state reference that points to the transaction and output index where the State
// was originally created at.
message GetStateResponse {
  tx.v1.ResolvedState state = 1;
}

// PutStateRequest contains a resolved state.
message PutStateRequest {
  tx.v1.ResolvedState state = 1;
}

// PutStateResponse is an empty response returned on attempting to store
// a resolved state in the backing store.
message PutStateResponse {}
