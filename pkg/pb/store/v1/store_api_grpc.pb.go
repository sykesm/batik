// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package storev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StoreAPIClient is the client API for StoreAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreAPIClient interface {
	// GetTransaction retrieves the associated transaction corresponding to the
	// txid passed in the GetTransactionRequest.
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
	// PutTransaction hashes the transaction and then stores the encoded
	// transaction in the backing store.
	// Note: This API is temporary and intended for test. DO NOT USE.
	PutTransaction(ctx context.Context, in *PutTransactionRequest, opts ...grpc.CallOption) (*PutTransactionResponse, error)
	// GetState retrieves the associated ResolvedState corresponding to the state
	// reference passed in the GetStateRequest from the backing store indexed by
	// a txid and output index that the State was originally created at in the
	// transaction output list.
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error)
	// PutState stores the encoded resolved state in the backing store.
	// Note: This API is temporary and intended for test. DO NOT USE.
	PutState(ctx context.Context, in *PutStateRequest, opts ...grpc.CallOption) (*PutStateResponse, error)
}

type storeAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreAPIClient(cc grpc.ClientConnInterface) StoreAPIClient {
	return &storeAPIClient{cc}
}

func (c *storeAPIClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, "/store.v1.StoreAPI/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeAPIClient) PutTransaction(ctx context.Context, in *PutTransactionRequest, opts ...grpc.CallOption) (*PutTransactionResponse, error) {
	out := new(PutTransactionResponse)
	err := c.cc.Invoke(ctx, "/store.v1.StoreAPI/PutTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeAPIClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error) {
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, "/store.v1.StoreAPI/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeAPIClient) PutState(ctx context.Context, in *PutStateRequest, opts ...grpc.CallOption) (*PutStateResponse, error) {
	out := new(PutStateResponse)
	err := c.cc.Invoke(ctx, "/store.v1.StoreAPI/PutState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreAPIServer is the server API for StoreAPI service.
// All implementations must embed UnimplementedStoreAPIServer
// for forward compatibility
type StoreAPIServer interface {
	// GetTransaction retrieves the associated transaction corresponding to the
	// txid passed in the GetTransactionRequest.
	GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error)
	// PutTransaction hashes the transaction and then stores the encoded
	// transaction in the backing store.
	// Note: This API is temporary and intended for test. DO NOT USE.
	PutTransaction(context.Context, *PutTransactionRequest) (*PutTransactionResponse, error)
	// GetState retrieves the associated ResolvedState corresponding to the state
	// reference passed in the GetStateRequest from the backing store indexed by
	// a txid and output index that the State was originally created at in the
	// transaction output list.
	GetState(context.Context, *GetStateRequest) (*GetStateResponse, error)
	// PutState stores the encoded resolved state in the backing store.
	// Note: This API is temporary and intended for test. DO NOT USE.
	PutState(context.Context, *PutStateRequest) (*PutStateResponse, error)
	mustEmbedUnimplementedStoreAPIServer()
}

// UnimplementedStoreAPIServer must be embedded to have forward compatible implementations.
type UnimplementedStoreAPIServer struct {
}

func (UnimplementedStoreAPIServer) GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedStoreAPIServer) PutTransaction(context.Context, *PutTransactionRequest) (*PutTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTransaction not implemented")
}
func (UnimplementedStoreAPIServer) GetState(context.Context, *GetStateRequest) (*GetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedStoreAPIServer) PutState(context.Context, *PutStateRequest) (*PutStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutState not implemented")
}
func (UnimplementedStoreAPIServer) mustEmbedUnimplementedStoreAPIServer() {}

// UnsafeStoreAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreAPIServer will
// result in compilation errors.
type UnsafeStoreAPIServer interface {
	mustEmbedUnimplementedStoreAPIServer()
}

func RegisterStoreAPIServer(s *grpc.Server, srv StoreAPIServer) {
	s.RegisterService(&_StoreAPI_serviceDesc, srv)
}

func _StoreAPI_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreAPIServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.v1.StoreAPI/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreAPIServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreAPI_PutTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreAPIServer).PutTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.v1.StoreAPI/PutTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreAPIServer).PutTransaction(ctx, req.(*PutTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreAPI_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreAPIServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.v1.StoreAPI/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreAPIServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreAPI_PutState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreAPIServer).PutState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.v1.StoreAPI/PutState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreAPIServer).PutState(ctx, req.(*PutStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StoreAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "store.v1.StoreAPI",
	HandlerType: (*StoreAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransaction",
			Handler:    _StoreAPI_GetTransaction_Handler,
		},
		{
			MethodName: "PutTransaction",
			Handler:    _StoreAPI_PutTransaction_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _StoreAPI_GetState_Handler,
		},
		{
			MethodName: "PutState",
			Handler:    _StoreAPI_PutState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "store/v1/store_api.proto",
}
