// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package orderer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AtomicBroadcastAPIClient is the client API for AtomicBroadcastAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AtomicBroadcastAPIClient interface {
	// Broadcast receives a reply of Acknowledgement for each common.Envelope in order, indicating success or type of failure.
	Broadcast(ctx context.Context, opts ...grpc.CallOption) (AtomicBroadcastAPI_BroadcastClient, error)
	// Deliver first requires an Envelope of type DELIVER_SEEK_INFO with Payload data as a mashaled SeekInfo message, then a stream of block replies is received.
	Deliver(ctx context.Context, opts ...grpc.CallOption) (AtomicBroadcastAPI_DeliverClient, error)
}

type atomicBroadcastAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAtomicBroadcastAPIClient(cc grpc.ClientConnInterface) AtomicBroadcastAPIClient {
	return &atomicBroadcastAPIClient{cc}
}

func (c *atomicBroadcastAPIClient) Broadcast(ctx context.Context, opts ...grpc.CallOption) (AtomicBroadcastAPI_BroadcastClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AtomicBroadcastAPI_serviceDesc.Streams[0], "/orderer.AtomicBroadcastAPI/Broadcast", opts...)
	if err != nil {
		return nil, err
	}
	x := &atomicBroadcastAPIBroadcastClient{stream}
	return x, nil
}

type AtomicBroadcastAPI_BroadcastClient interface {
	Send(*BroadcastRequest) error
	Recv() (*BroadcastResponse, error)
	grpc.ClientStream
}

type atomicBroadcastAPIBroadcastClient struct {
	grpc.ClientStream
}

func (x *atomicBroadcastAPIBroadcastClient) Send(m *BroadcastRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *atomicBroadcastAPIBroadcastClient) Recv() (*BroadcastResponse, error) {
	m := new(BroadcastResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *atomicBroadcastAPIClient) Deliver(ctx context.Context, opts ...grpc.CallOption) (AtomicBroadcastAPI_DeliverClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AtomicBroadcastAPI_serviceDesc.Streams[1], "/orderer.AtomicBroadcastAPI/Deliver", opts...)
	if err != nil {
		return nil, err
	}
	x := &atomicBroadcastAPIDeliverClient{stream}
	return x, nil
}

type AtomicBroadcastAPI_DeliverClient interface {
	Send(*DeliverRequest) error
	Recv() (*DeliverResponse, error)
	grpc.ClientStream
}

type atomicBroadcastAPIDeliverClient struct {
	grpc.ClientStream
}

func (x *atomicBroadcastAPIDeliverClient) Send(m *DeliverRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *atomicBroadcastAPIDeliverClient) Recv() (*DeliverResponse, error) {
	m := new(DeliverResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AtomicBroadcastAPIServer is the server API for AtomicBroadcastAPI service.
// All implementations must embed UnimplementedAtomicBroadcastAPIServer
// for forward compatibility
type AtomicBroadcastAPIServer interface {
	// Broadcast receives a reply of Acknowledgement for each common.Envelope in order, indicating success or type of failure.
	Broadcast(AtomicBroadcastAPI_BroadcastServer) error
	// Deliver first requires an Envelope of type DELIVER_SEEK_INFO with Payload data as a mashaled SeekInfo message, then a stream of block replies is received.
	Deliver(AtomicBroadcastAPI_DeliverServer) error
	mustEmbedUnimplementedAtomicBroadcastAPIServer()
}

// UnimplementedAtomicBroadcastAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAtomicBroadcastAPIServer struct {
}

func (UnimplementedAtomicBroadcastAPIServer) Broadcast(AtomicBroadcastAPI_BroadcastServer) error {
	return status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedAtomicBroadcastAPIServer) Deliver(AtomicBroadcastAPI_DeliverServer) error {
	return status.Errorf(codes.Unimplemented, "method Deliver not implemented")
}
func (UnimplementedAtomicBroadcastAPIServer) mustEmbedUnimplementedAtomicBroadcastAPIServer() {}

// UnsafeAtomicBroadcastAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AtomicBroadcastAPIServer will
// result in compilation errors.
type UnsafeAtomicBroadcastAPIServer interface {
	mustEmbedUnimplementedAtomicBroadcastAPIServer()
}

func RegisterAtomicBroadcastAPIServer(s *grpc.Server, srv AtomicBroadcastAPIServer) {
	s.RegisterService(&_AtomicBroadcastAPI_serviceDesc, srv)
}

func _AtomicBroadcastAPI_Broadcast_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AtomicBroadcastAPIServer).Broadcast(&atomicBroadcastAPIBroadcastServer{stream})
}

type AtomicBroadcastAPI_BroadcastServer interface {
	Send(*BroadcastResponse) error
	Recv() (*BroadcastRequest, error)
	grpc.ServerStream
}

type atomicBroadcastAPIBroadcastServer struct {
	grpc.ServerStream
}

func (x *atomicBroadcastAPIBroadcastServer) Send(m *BroadcastResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *atomicBroadcastAPIBroadcastServer) Recv() (*BroadcastRequest, error) {
	m := new(BroadcastRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AtomicBroadcastAPI_Deliver_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AtomicBroadcastAPIServer).Deliver(&atomicBroadcastAPIDeliverServer{stream})
}

type AtomicBroadcastAPI_DeliverServer interface {
	Send(*DeliverResponse) error
	Recv() (*DeliverRequest, error)
	grpc.ServerStream
}

type atomicBroadcastAPIDeliverServer struct {
	grpc.ServerStream
}

func (x *atomicBroadcastAPIDeliverServer) Send(m *DeliverResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *atomicBroadcastAPIDeliverServer) Recv() (*DeliverRequest, error) {
	m := new(DeliverRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AtomicBroadcastAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "orderer.AtomicBroadcastAPI",
	HandlerType: (*AtomicBroadcastAPIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Broadcast",
			Handler:       _AtomicBroadcastAPI_Broadcast_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Deliver",
			Handler:       _AtomicBroadcastAPI_Deliver_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "orderer/atomic_broadcast_api.proto",
}
