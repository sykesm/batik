// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package validationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ValidationAPIClient is the client API for ValidationAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValidationAPIClient interface {
	// Validate is used to ensure that a transaction is semantically valid prior
	// to committing it to the ledger. This operation is only invoked if a
	// transaction has not already been committed and transaction inputs and
	// references have not been consumed.
	//
	// When Validate returns without error, the transaction is considered valid
	// and will enter commit processing. Valid transactions may fail to commit
	// if the invariants established prior to validation have changed or any
	// invariants raised by the validator are not satisfied.
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
}

type validationAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewValidationAPIClient(cc grpc.ClientConnInterface) ValidationAPIClient {
	return &validationAPIClient{cc}
}

func (c *validationAPIClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, "/validation.v1.ValidationAPI/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValidationAPIServer is the server API for ValidationAPI service.
// All implementations must embed UnimplementedValidationAPIServer
// for forward compatibility
type ValidationAPIServer interface {
	// Validate is used to ensure that a transaction is semantically valid prior
	// to committing it to the ledger. This operation is only invoked if a
	// transaction has not already been committed and transaction inputs and
	// references have not been consumed.
	//
	// When Validate returns without error, the transaction is considered valid
	// and will enter commit processing. Valid transactions may fail to commit
	// if the invariants established prior to validation have changed or any
	// invariants raised by the validator are not satisfied.
	Validate(context.Context, *ValidateRequest) (*ValidateResponse, error)
	mustEmbedUnimplementedValidationAPIServer()
}

// UnimplementedValidationAPIServer must be embedded to have forward compatible implementations.
type UnimplementedValidationAPIServer struct {
}

func (UnimplementedValidationAPIServer) Validate(context.Context, *ValidateRequest) (*ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedValidationAPIServer) mustEmbedUnimplementedValidationAPIServer() {}

// UnsafeValidationAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValidationAPIServer will
// result in compilation errors.
type UnsafeValidationAPIServer interface {
	mustEmbedUnimplementedValidationAPIServer()
}

func RegisterValidationAPIServer(s grpc.ServiceRegistrar, srv ValidationAPIServer) {
	s.RegisterService(&_ValidationAPI_serviceDesc, srv)
}

func _ValidationAPI_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidationAPIServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/validation.v1.ValidationAPI/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidationAPIServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ValidationAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "validation.v1.ValidationAPI",
	HandlerType: (*ValidationAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validate",
			Handler:    _ValidationAPI_Validate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "validation/v1/validation_api.proto",
}
