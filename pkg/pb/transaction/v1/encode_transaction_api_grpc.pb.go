// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package transactionv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// EncodeTransactionAPIClient is the client API for EncodeTransactionAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EncodeTransactionAPIClient interface {
	// EncodeTransaction encodes a transaction via deterministic marshal and returns
	// the encoded bytes as well as a hash over the transaction represented as a merkle
	// root and generated via SHA256 as the internal hashing function.
	EncodeTransaction(ctx context.Context, in *EncodeTransactionRequest, opts ...grpc.CallOption) (*EncodeTransactionResponse, error)
}

type encodeTransactionAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewEncodeTransactionAPIClient(cc grpc.ClientConnInterface) EncodeTransactionAPIClient {
	return &encodeTransactionAPIClient{cc}
}

func (c *encodeTransactionAPIClient) EncodeTransaction(ctx context.Context, in *EncodeTransactionRequest, opts ...grpc.CallOption) (*EncodeTransactionResponse, error) {
	out := new(EncodeTransactionResponse)
	err := c.cc.Invoke(ctx, "/transaction.v1.EncodeTransactionAPI/EncodeTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EncodeTransactionAPIServer is the server API for EncodeTransactionAPI service.
// All implementations must embed UnimplementedEncodeTransactionAPIServer
// for forward compatibility
type EncodeTransactionAPIServer interface {
	// EncodeTransaction encodes a transaction via deterministic marshal and returns
	// the encoded bytes as well as a hash over the transaction represented as a merkle
	// root and generated via SHA256 as the internal hashing function.
	EncodeTransaction(context.Context, *EncodeTransactionRequest) (*EncodeTransactionResponse, error)
	mustEmbedUnimplementedEncodeTransactionAPIServer()
}

// UnimplementedEncodeTransactionAPIServer must be embedded to have forward compatible implementations.
type UnimplementedEncodeTransactionAPIServer struct {
}

func (UnimplementedEncodeTransactionAPIServer) EncodeTransaction(context.Context, *EncodeTransactionRequest) (*EncodeTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncodeTransaction not implemented")
}
func (UnimplementedEncodeTransactionAPIServer) mustEmbedUnimplementedEncodeTransactionAPIServer() {}

// UnsafeEncodeTransactionAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EncodeTransactionAPIServer will
// result in compilation errors.
type UnsafeEncodeTransactionAPIServer interface {
	mustEmbedUnimplementedEncodeTransactionAPIServer()
}

func RegisterEncodeTransactionAPIServer(s *grpc.Server, srv EncodeTransactionAPIServer) {
	s.RegisterService(&_EncodeTransactionAPI_serviceDesc, srv)
}

func _EncodeTransactionAPI_EncodeTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodeTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncodeTransactionAPIServer).EncodeTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.v1.EncodeTransactionAPI/EncodeTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncodeTransactionAPIServer).EncodeTransaction(ctx, req.(*EncodeTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EncodeTransactionAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transaction.v1.EncodeTransactionAPI",
	HandlerType: (*EncodeTransactionAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EncodeTransaction",
			Handler:    _EncodeTransactionAPI_EncodeTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction/v1/encode_transaction_api.proto",
}
