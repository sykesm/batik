// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package transaction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SubmitTransactionAPIClient is the client API for SubmitTransactionAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubmitTransactionAPIClient interface {
	// SubmitTransaction submits a transaction for validation and commit processing.
	// NOTE: This is an implementation for prototyping.
	SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*SubmitTransactionResponse, error)
}

type submitTransactionAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewSubmitTransactionAPIClient(cc grpc.ClientConnInterface) SubmitTransactionAPIClient {
	return &submitTransactionAPIClient{cc}
}

func (c *submitTransactionAPIClient) SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*SubmitTransactionResponse, error) {
	out := new(SubmitTransactionResponse)
	err := c.cc.Invoke(ctx, "/transaction.SubmitTransactionAPI/SubmitTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubmitTransactionAPIServer is the server API for SubmitTransactionAPI service.
// All implementations must embed UnimplementedSubmitTransactionAPIServer
// for forward compatibility
type SubmitTransactionAPIServer interface {
	// SubmitTransaction submits a transaction for validation and commit processing.
	// NOTE: This is an implementation for prototyping.
	SubmitTransaction(context.Context, *SubmitTransactionRequest) (*SubmitTransactionResponse, error)
	mustEmbedUnimplementedSubmitTransactionAPIServer()
}

// UnimplementedSubmitTransactionAPIServer must be embedded to have forward compatible implementations.
type UnimplementedSubmitTransactionAPIServer struct {
}

func (UnimplementedSubmitTransactionAPIServer) SubmitTransaction(context.Context, *SubmitTransactionRequest) (*SubmitTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTransaction not implemented")
}
func (UnimplementedSubmitTransactionAPIServer) mustEmbedUnimplementedSubmitTransactionAPIServer() {}

// UnsafeSubmitTransactionAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubmitTransactionAPIServer will
// result in compilation errors.
type UnsafeSubmitTransactionAPIServer interface {
	mustEmbedUnimplementedSubmitTransactionAPIServer()
}

func RegisterSubmitTransactionAPIServer(s *grpc.Server, srv SubmitTransactionAPIServer) {
	s.RegisterService(&_SubmitTransactionAPI_serviceDesc, srv)
}

func _SubmitTransactionAPI_SubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmitTransactionAPIServer).SubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.SubmitTransactionAPI/SubmitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmitTransactionAPIServer).SubmitTransaction(ctx, req.(*SubmitTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubmitTransactionAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transaction.SubmitTransactionAPI",
	HandlerType: (*SubmitTransactionAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTransaction",
			Handler:    _SubmitTransactionAPI_SubmitTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction/submit_transaction_api.proto",
}
